    log_format	upstream_log	'$server_name to $upstream_addr [$request] '
                                    'upstream_http_content_type $upstream_http_content_type'
                                    'upstream_response_time $upstream_response_time '
                                    'msec $msec request_time $request_time'
                                    '$status $body_bytes_sent "$http_referer" '
                                    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log  /var/logs/nginx_access.log  upstream_log;
# nginx-proxy version : 1.0.4-8-g2f89856
# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
  default $http_x_forwarded_proto;
  ''      $scheme;
}
map $http_x_forwarded_host $proxy_x_forwarded_host {
  default $http_x_forwarded_host;
  ''      $http_host;
}
# If we receive X-Forwarded-Port, pass it through; otherwise, pass along the
# server port the client connected to
map $http_x_forwarded_port $proxy_x_forwarded_port {
  default $http_x_forwarded_port;
  ''      $server_port;
}
# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
  default upgrade;
  '' close;
}
# Apply fix for very long server names
server_names_hash_bucket_size 128;
# Default dhparam
#ssl_dhparam /etc/nginx/dhparam/dhparam.pem;
# Set appropriate X-Forwarded-Ssl header based on $proxy_x_forwarded_proto
map $proxy_x_forwarded_proto $proxy_x_forwarded_ssl {
  default off;
  https on;
}
gzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

                ssl_protocols TLSv1.2 TLSv1.3;
                ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
                ssl_prefer_server_ciphers off;

resolver 127.0.0.11;
include /etc/nginx/proxy.conf;


        # docker.neva.loc
upstream ${BASE_URL} {
        ## Can be connected with "net-hub" network
        # testssl-whoamiapi-1
        server ${INTERNAL_URL};
}
server {
        server_name _; # This is just an invalid value which will never trigger on a real hostname.
        server_tokens off;
        listen 80;

        return 503;
}	
server {
	listen 80 ;
	server_name ${BASE_URL};

	
	# Do not HTTPS redirect Let'sEncrypt ACME challenge
	location ^~ /.well-known/acme-challenge/ {
		auth_basic off;
		auth_request off;
		allow all;
		root /usr/share/nginx/html;
		try_files $uri =404;
		break;
	}
	location / {
		return 301 https://$host$request_uri;
	}
}
   
  server {
	listen 443 ssl http2 ;	
	server_name  ${BASE_URL};
	
	ssl_session_timeout 5m;
	ssl_session_cache off; #shared:SSL:50m;
	ssl_session_tickets off;
	ssl_certificate /etc/nginx/certs/${BASE_URL}.crt;
	ssl_certificate_key /etc/nginx/certs/${BASE_URL}.key;
#	add_header Strict-Transport-Security "max-age=31536000" always;
	

    location / {
                proxy_pass http://${BASE_URL};
    }    
  }
