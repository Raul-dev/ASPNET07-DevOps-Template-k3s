image: docker:dind

stages:
  - build
  - deploy
variables:
# Set the variable $KUBE_CONTEXT through the GitLab UI, or set it here by
# uncommenting the following two lines and replacing the Agent's path with your own:
# variables:
  KUBE_CONTEXT: "shop/nevashop:prod"
  GIT_SSL_NO_VERIFY: "true"

#For container: bitnami/kubectl:1.21
.kube-context:
  before_script:
    - if [ -n "$KUBE_CONTEXT" ]; then kubectl config use-context "$KUBE_CONTEXT"; fi

#For container: alpine/helm:3.11.2
.kubehelm-context:
  before_script:
    - echo $KUBE_CONFIG
    # $KUBE_CONFIG is Empty
    #- mkdir -p /root/.kube
    #- echo $KUBE_CONFIG | base64 -d > /root/.kube/config    
    # Install kubectl
    - apk add curl
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    - chmod +x ./kubectl
    - mv ./kubectl /usr/bin/kubectl
    - if [ -n "$KUBE_CONTEXT" ]; then kubectl config use-context "$KUBE_CONTEXT"; fi   

.deploy-script: &deploy-script
  - docker-compose -f ./deployment/gitlabci/docker-compose.misc.yml up -d 
  - docker-compose -f ./deployment/gitlabci/docker-compose.elk.yml up -d 

.before-script: &before-script
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  - echo "mnt test"
  #- ls /mnt/test57
  # TODO for prod environment
  #- export DOCKER_TAG=$(echo $CI_COMMIT_BRANCH | sed 's#/#_#g')-$CI_COMMIT_SHORT_SHA
  - export DOCKER_TAG=latest
  - export DOCKER_REGISTRY=$CI_REGISTRY_IMAGE
  - docker network inspect dev_shop >/dev/null 2>&1 || docker network create --driver bridge dev_shop
  - export NET_NAME=dev_shop
  # TODO for prod environment
  - export NS_BASE_URL=$(if [[ $CI_ENVIRONMENT_NAME = production ]]; then echo "ubuntu22.neva.loc"; else echo "ubuntu22.neva.loc"; fi) 
  - echo $NS_BASE_URL
  - export NS_ASPNETCORE_URLS="http://*:80"
  #- export NS_CERTS=/srv/nginx/certs
  - export NS_CERTS="/srv/nginx/certssso"
  - export NS_LOG_PATH="/srvlogs"
  - export NS_PROXY_PATH=/srv/nginx/proxy.conf
  - export NS_SHOPMANAGER_PATHBASE=/admin
  - export NS_IDENTITYAPI_PATHBASE=/identity
  - export NS_CATALOGAPI_PATHBASE=/catalog
  - export NS_SCHEMA=https
  - export NS_CERTS_ROOT=./srv/buildcertificate/rootca
  - export PROD_BASE_URL=$PROD_BASE_URL
build-containers-branch:
  stage: build
  tags: 
    - $RUNNER_NAME
  before_script:
    - *before-script
  script:
    #- $BuildOption = --no-cache
    #- mkdir -p ./src/srv/buildcertificate/rootca
    #- cp -R /rootca/* ./src/srv/buildcertificate/rootca
    - cp -r ./src/srv/sso/* /srv/sso
    #- mkdir -p /srv/nginx
    - cp -r ./src/Frontend/WebSPA/nginx/* /srv/nginx/
    - docker build $BuildOption --build-arg CERTS_PATH=$NS_CERTS_ROOT -t $CI_REGISTRY_IMAGE/catalogapi:$DOCKER_TAG ./src -f ./src/Services/CatalogApi/Dockerfile
    - docker push $CI_REGISTRY_IMAGE/catalogapi:$DOCKER_TAG
    #- docker build $BuildOption --build-arg CERTS_PATH=$NS_CERTS_ROOT -t $CI_REGISTRY_IMAGE/identityapi:$DOCKER_TAG ./src -f ./src/Services/IdentityApi/Dockerfile
    #- docker push $CI_REGISTRY_IMAGE/identityapi:$DOCKER_TAG
    # Container IP. TODO get external IP
    #- export ADDRESS_IP=$(ip -f inet addr show eth0 | sed -En -e 's/.*inet ([0-9.]+).*/\1/p')
    #- export ADDRESS_IP=$(/sbin/ip route|awk '/default/ { print $3 }')
    
    - echo ${ADDRESS_IP}
    - cp ./src/Frontend/WebSPA/nginx/links.html linksprod.html
    - sed 's/127.0.0.1/'$ADDRESS_IP'/g' ./src/Frontend/WebSPA/nginx/links.html > links.html && mv links.html ./src/Frontend/WebSPA/nginx/links.html
    - docker build $BuildOption --build-arg BASE_URL=$NS_BASE_URL --build-arg OIDC_CLIENT_SECRET=AGVacqRHpG5PXbUXpaQ0kKiXartkh5LB --build-arg TOKEN_SERVICE_URL=$NS_BASE_URL/identity/realms/nevashop -t $CI_REGISTRY_IMAGE/frontend:$DOCKER_TAG ./src -f ./src/Frontend/WebSPA/Dockerfile
    - docker push  $CI_REGISTRY_IMAGE/frontend:$DOCKER_TAG
    - docker build $BuildOption --build-arg CERTS_PATH=$NS_CERTS_ROOT -t $CI_REGISTRY_IMAGE/shopmanager:$DOCKER_TAG ./src -f ./src/ShopManager/Dockerfile
    - docker push $CI_REGISTRY_IMAGE/shopmanager:$DOCKER_TAG
#Kuber
    
    - echo ${ADDRESS_IP_PROD}
    - sed 's/127.0.0.1/'$ADDRESS_IP_PROD'/g' linksprod.html > links.html && mv links.html ./src/Frontend/WebSPA/nginx/links.html
    - docker build $BuildOption --build-arg BASE_URL=$PROD_BASE_URL --build-arg OIDC_CLIENT_SECRET=AGVacqRHpG5PXbUXpaQ0kKiXartkh5LB --build-arg TOKEN_SERVICE_URL=$PROD_BASE_URL/identity/realms/nevashop -t $CI_REGISTRY_IMAGE/frontendprod:$DOCKER_TAG ./src -f ./src/Frontend/WebSPA/Dockerfile
    - docker push  $CI_REGISTRY_IMAGE/frontendprod:$DOCKER_TAG

  rules:
    - if: $CI_PIPELINE_SOURCE != "schedule" && $CI_PIPELINE_SOURCE != "merge_request_event"
    - when: never


deploy-branch:
  stage: deploy
  when: manual
  tags: 
    - $RUNNER_NAME
  variables:
    COMPOSE_PROJECT_NAME: "nevashop"

  before_script:
    - *before-script
    - *deploy-script

  script:
    - echo $COMPOSE_PROJECT_NAME
    - echo $CI_ENVIRONMENT_NAME
    # TODO for prod environment
    #- export ASP_ENV=$(echo $CI_ENVIRONMENT_NAME | awk '{print toupper(substr($0,0,1))tolower(substr($0,2))}')
    #- echo $ASP_ENV
    - rm -rf $NS_LOG_PATH
    - docker-compose -f ./deployment/gitlabci/docker-compose.yml down
    - docker-compose -f ./deployment/gitlabci/docker-compose.yml -f ./deployment/gitlabci/docker-compose.override.yml  up -d --force-recreate
    - sleep 5
    - docker logs nevashop-shopmanager-1

destroy-deployed-branch:
  stage: build
  when: manual
  tags: 
    - $RUNNER_NAME  
  variables:
    COMPOSE_PROJECT_NAME: "nevashop"

  before_script:
    - *before-script    
  script:
    - docker-compose -f ./deployment/gitlabci/docker-compose.yml down
    - docker-compose -f ./deployment/gitlabci/docker-compose.misc.yml down
    - docker-compose -f ./deployment/gitlabci/docker-compose.elk.yml down

k3s-deployment:
  extends: [.kubehelm-context]
  stage: deploy
  when: manual
  image:
    name: alpine/helm:3.11.2
    entrypoint: [""]
  tags: 
    - $RUNNER_NAME  

  script:
    - kubectl config get-contexts
    - kubectl get pods --insecure-skip-tls-verify
    - helm version
    - echo $PROD_SECRET_TLS
    - > 
        helm upgrade --atomic --install --kube-insecure-skip-tls-verify 
        --set ingress.hosts[0].host=$PROD_BASE_URL
        --set "ingress.tls[0].hosts={$PROD_BASE_URL}"
        --set ingress.tls[0].secretName=$PROD_SECRET_TLS
        whoamiapi ./deployment/kuber/whoamiapi/ -f ./deployment/kuber/valueswhoamiapi.yaml
    - kubectl get ing whoamiapi -o yaml --insecure-skip-tls-verify
    - > 
        helm upgrade --atomic --install --kube-insecure-skip-tls-verify 
        --set ingress.hosts[0].host=$PROD_BASE_URL
        --set "ingress.tls[0].hosts={$PROD_BASE_URL}"
        --set ingress.tls[0].secretName=$PROD_SECRET_TLS
        --set IdentityS4Settings__IssuerURL="https://$PROD_BASE_URL/identity/realms/nevashop"
        catalogapi ./deployment/kuber/catalogapi/ -f ./deployment/kuber/valuescatalogapi.yaml
    - > 
        helm upgrade --atomic --install --kube-insecure-skip-tls-verify 
        --set ingress.hosts[0].host=$PROD_BASE_URL
        --set "ingress.tls[0].hosts={$PROD_BASE_URL}"
        --set ingress.tls[0].secretName=$PROD_SECRET_TLS
        --set ApiSettings__CatalogUrl="http://catalogapi/catalog"
        --set ApiSettings__CatalogHost_EXTERNAL="https://$PROD_BASE_URL/catalog"            
        shopmanager ./deployment/kuber/shopmanager/ -f ./deployment/kuber/valuesshopmanager.yaml
    - > 
        helm upgrade --atomic --install --kube-insecure-skip-tls-verify 
        --set ingress.hosts[0].host=$PROD_BASE_URL
        --set "ingress.tls[0].hosts={$PROD_BASE_URL}"
        --set ingress.tls[0].secretName=$PROD_SECRET_TLS
        frontend ./deployment/kuber/frontend/ -f ./deployment/kuber/valuesfrontend.yaml


k3s-destroy-deployed-branch:
  extends: [.kubehelm-context]
  stage: build
  when: manual
  image:
    name: alpine/helm:3.11.2
    entrypoint: [""]
  tags: 
    - $RUNNER_NAME  
   
  script:
    - kubectl config get-contexts
    - kubectl get pods --all-namespaces --insecure-skip-tls-verify
    - helm delete --kube-insecure-skip-tls-verify whoamiapi
    - helm delete --kube-insecure-skip-tls-verify catalogapi
    - helm delete --kube-insecure-skip-tls-verify shopmanager
    - helm delete --kube-insecure-skip-tls-verify frontend
